package main

import (
	"encoding/base64"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
)

func main() {
	f, err := os.Open("../telegraf/telegraf.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	raw, err := ioutil.ReadAll(f)
	if err != nil {
		log.Fatal(err)
	}
	reg := regexp.MustCompile(`\s*_\s+"github.com/influxdata/telegraf/plugins/((aggregators)?(inputs)?(outputs)?(processors)?)/all"`)

	replaced := false
	tmpl := reg.ReplaceAllFunc(raw, func(_ []byte) []byte {
		if !replaced {
			replaced = true
			return []byte(`
{{range $index, $plugin := .Aggregators}} 
	_ "github.com/influxdata/telegraf/plugins/aggregators/{{- $plugin -}}"
{{end}}
{{range $index, $plugin := .Inputs}} 
	_ "github.com/influxdata/telegraf/plugins/inputs/{{- $plugin -}}"
{{end}}
{{range $index, $plugin := .Outputs}} 
	_ "github.com/influxdata/telegraf/plugins/outputs/{{- $plugin -}}"
{{end}}
{{range $index, $plugin := .Processors}} 
	_ "github.com/influxdata/telegraf/plugins/processors/{{- $plugin -}}"
{{end}}
`)
		}
		return []byte{}
	})

	filepath.Base(os.Getenv("GOFILE")) // get the enclosing folder we were called from
	fout, err := os.Create("generated_template.go")
	if err != nil {
		log.Fatal(err)
	}
	defer fout.Close()

	fout.WriteString("// Code generated by github.com/influxdata/telegraf/telegraf-lite-builder/scripts/templatebuilder DO NOT EDIT.\n package main\n\n")
	buf := make([]byte, base64.StdEncoding.EncodedLen(len(tmpl)))
	base64.StdEncoding.Encode(buf, tmpl)
	fout.WriteString("const mainTemplateBase64 = `")
	fout.Write(buf)
	fout.Write([]byte{'`', '\n'})
	f.Close()

	f, err = os.Open("../../Gopkg.lock")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	fout.WriteString("\nconst gopkgLock = `")
	w := base64.NewEncoder(base64.StdEncoding, fout)
	if _, err = io.Copy(w, f); err != nil {
		log.Fatal(err)
	}
	f.Close()
	w.Close()
	fout.Write([]byte{'`', '\n'})
	f, err = os.Open("../../Gopkg.toml")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	fout.WriteString("\nconst gopkgtoml = `")
	w = base64.NewEncoder(base64.StdEncoding, fout)
	if _, err = io.Copy(w, f); err != nil {
		log.Fatal(err)
	}
	f.Close()
	w.Close()
	fout.Write([]byte{'`', '\n'})
	fout.Close()

}
